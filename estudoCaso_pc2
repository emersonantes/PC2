#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <locale.h>
#include <time.h>

#define SENHA 1234

typedef struct Endereco {
    int numero;
    char rua[100];
    char bairro[100];
} Endereco;

typedef struct Cliente {
    int id;
    char nome[50];
    Endereco endereco;
} Cliente;

typedef struct Produto {
    int id;
    char nome[50];
    float preco;
    int quantidade_estoque;
} Produto;

typedef struct VendaItem {
    int produto_id;
    int quantidade;
} VendaItem;

typedef struct Venda {
    int id;
    Cliente cliente;
    VendaItem produtos[10];
    int quantidade_produtos;
    float valor_total;
    char tipo_pagamento[50];
    char data_hora[20]; // Adiciona data e hora na estrutura
} Venda;

void obterDataHora(char dataHoraStr[20]) {
    time_t t;
    struct tm *tm_info;

    time(&t);
    tm_info = localtime(&t);

    strftime(dataHoraStr, 20, "%d/%m/%Y %H:%M:%S", tm_info);
}

void cadastrarCliente(Cliente *clientes, int *numClientes) {
    Cliente novoCliente;

    printf("Digite o nome do cliente: ");
    fgets(novoCliente.nome, sizeof(novoCliente.nome), stdin);
    novoCliente.nome[strcspn(novoCliente.nome, "\n")] = '\0';

    printf("\n=== Endereço do cliente ===\n");
    printf("Digite a Rua: ");
    fgets(novoCliente.endereco.rua, sizeof(novoCliente.endereco.rua), stdin);
    novoCliente.endereco.rua[strcspn(novoCliente.endereco.rua, "\n")] = '\0';

    printf("Digite o Número do endereço: ");
    scanf("%d", &novoCliente.endereco.numero);
    getchar(); // Limpar o buffer de entrada

    printf("Digite o Bairro: ");
    fgets(novoCliente.endereco.bairro, sizeof(novoCliente.endereco.bairro), stdin);
    novoCliente.endereco.bairro[strcspn(novoCliente.endereco.bairro, "\n")] = '\0';

    novoCliente.id = (*numClientes) + 1;
    clientes[*numClientes] = novoCliente;
    (*numClientes)++;

    printf("Cliente cadastrado com sucesso!\n");
}

void cadastrarProduto(Produto *produtos, int *numProdutos) {
    Produto novoProduto;

    printf("Digite o nome do produto: ");
    fgets(novoProduto.nome, sizeof(novoProduto.nome), stdin);
    novoProduto.nome[strcspn(novoProduto.nome, "\n")] = '\0';

    printf("Digite o preço do produto: ");
    scanf("%f", &novoProduto.preco);
    getchar(); // Limpar o buffer de entrada

    printf("Digite a quantidade em estoque: ");
    scanf("%d", &novoProduto.quantidade_estoque);
    getchar(); // Limpar o buffer de entrada

    novoProduto.id = (*numProdutos) + 1;
    produtos[*numProdutos] = novoProduto;
    (*numProdutos)++;

    printf("Produto cadastrado com sucesso!\n");
}

void realizarVenda(Venda *vendas, int *numVendas, Cliente *clientes, int numClientes, Produto *produtos, int numProdutos) {
    Venda novaVenda;
    int clienteSelecionadoID;
    int produtoSelecionadoID;

    printf("Selecione o cliente para a venda:\n");
    for (int i = 0; i < numClientes; i++) {
        printf("%d. %s\n", clientes[i].id, clientes[i].nome);
    }
    printf("Digite o ID do cliente: ");
    scanf("%d", &clienteSelecionadoID);
    getchar(); // Limpar o buffer de entrada

    // Encontrar o cliente selecionado no vetor de clientes
    Cliente clienteSelecionado = {};
    for (int i = 0; i < numClientes; i++) {
        if (clientes[i].id == clienteSelecionadoID) {
            clienteSelecionado = clientes[i];
            break;
        }
    }

    novaVenda.id = (*numVendas) + 1;
    novaVenda.cliente = clienteSelecionado;
    novaVenda.quantidade_produtos = 0;
    novaVenda.valor_total = 0;
    obterDataHora(novaVenda.data_hora); // Obtém a data e hora

    while (1) {
        printf("Selecione um produto para adicionar à venda (ou digite 0 para encerrar):\n");
        for (int i = 0; i < numProdutos; i++) {
            printf("%d. %s - R$ %.2f - Estoque: %d\n", produtos[i].id, produtos[i].nome, produtos[i].preco, produtos[i].quantidade_estoque);
        }
        printf("Digite o ID do produto: ");
        scanf("%d", &produtoSelecionadoID);
        getchar(); // Limpar o buffer de entrada

        if (produtoSelecionadoID == 0) {
            break;
        }

        for (int i = 0; i < numProdutos; i++) {
            if (produtos[i].id == produtoSelecionadoID) {
                if (produtos[i].quantidade_estoque > 0) {
                    int quantidadeVendida;
                    printf("Digite a quantidade: ");
                    scanf("%d", &quantidadeVendida);
                    getchar(); // Limpar o buffer de entrada

                    if (quantidadeVendida > 0 && quantidadeVendida <= produtos[i].quantidade_estoque) {
                        novaVenda.produtos[novaVenda.quantidade_produtos].produto_id = produtoSelecionadoID;
                        novaVenda.produtos[novaVenda.quantidade_produtos].quantidade = quantidadeVendida;
                        novaVenda.quantidade_produtos++;
                        novaVenda.valor_total += produtos[i].preco * quantidadeVendida;
                        produtos[i].quantidade_estoque -= quantidadeVendida;
                    } else {
                        printf("Quantidade inválida ou estoque insuficiente para o produto selecionado.\n");
                    }
                } else {
                    printf("Estoque insuficiente para o produto selecionado.\n");
                }
                break;
            }
        }
    }

    vendas[*numVendas] = novaVenda;
    (*numVendas)++;

    printf("Venda realizada com sucesso!\n");
}

void gerarRelatorioVendas(Venda *vendas, int numVendas, Produto *produtos, int numProdutos) {
    float totalVendas = 0;

    printf("\n-------------------------------- RELATÓRIO DE VENDAS --------------------------------\n");
    printf("| CÓDIGO  | DATA E HORA           | NOME DO CLIENTE      | PRODUTO       | QUANTIDADE | VALOR UNIT | VALOR TOTAL |\n");
    printf("--------------------------------------------------------------------------------------------------------------\n");

    if (numVendas == 0) {
        printf("|        |                       |                      |               |            |            |             |\n");
    } else {
        for (int i = 0; i < numVendas; i++) {
            printf("|%-8d| %-21s | %-18s |", vendas[i].id, vendas[i].data_hora, vendas[i].cliente.nome);

            for (int j = 0; j < vendas[i].quantidade_produtos; j++) {
                int produto_id = vendas[i].produtos[j].produto_id;
                int quantidade = vendas[i].produtos[j].quantidade;

                totalVendas += vendas[i].valor_total;

                for (int k = 0; k < numProdutos; k++) {
                    if (produtos[k].id == produto_id) {
                        printf(" %-12s | %-10d | %-10.2f | %-10.2f |\n", produtos[k].nome, quantidade, produtos[k].preco, produtos[k].preco * quantidade);
                    }
                }
            }
        }
    }

    printf("--------------------------------------------------------------------------------------------------------------\n");
    printf("Total de vendas: R$ %.2f\n", totalVendas);
}

void ArqRelVendas(Venda *vendas, int numVendas, Produto *produtos, int numProdutos) {
    FILE *arquivo;
    arquivo = fopen("relatorio_vendas.txt", "w");

    if (arquivo == NULL) {
        printf("Erro ao criar o arquivo.\n");
        return;
    }

    fprintf(arquivo, "-------------------------------- RELATÓRIO DE VENDAS --------------------------------\n");
    fprintf(arquivo, "| CÓDIGO  | DATA E HORA           | NOME DO CLIENTE      | PRODUTO       | QUANTIDADE | VALOR UNIT | VALOR TOTAL |\n");
    fprintf(arquivo, "--------------------------------------------------------------------------------------------------------------\n");

    float totalVendas = 0;

    if (numVendas == 0) {
        fprintf(arquivo, "|        |                       |                      |               |            |            |             |\n");
    } else {
        for (int i = 0; i < numVendas; i++) {
            fprintf(arquivo, "|%-8d| %-21s | %-18s |", vendas[i].id, vendas[i].data_hora, vendas[i].cliente.nome);

            for (int j = 0; j < vendas[i].quantidade_produtos; j++) {
                int produto_id = vendas[i].produtos[j].produto_id;
                int quantidade = vendas[i].produtos[j].quantidade;

                totalVendas += vendas[i].valor_total;

                for (int k = 0; k < numProdutos; k++) {
                    if (produtos[k].id == produto_id) {
                        fprintf(arquivo, " %-12s | %-10d | %-10.2f | %-10.2f |\n", produtos[k].nome, quantidade, produtos[k].preco, produtos[k].preco * quantidade);
                    }
                }
            }
        }
    }

    fprintf(arquivo, "--------------------------------------------------------------------------------------------------------------\n");
    fprintf(arquivo, "Total de vendas: R$ %.2f\n", totalVendas);

    fclose(arquivo);
    printf("Relatório de vendas gerado com sucesso!\n");
}

void removerProduto(Produto *produtos, int *numProdutos) {
    int produtoID;
    int produtoEncontrado = 0;

    printf("Digite o ID do produto que deseja remover: ");
    scanf("%d", &produtoID);
    getchar(); // Limpar o buffer de entrada

    for (int i = 0; i < *numProdutos; i++) {
        if (produtos[i].id == produtoID) {
            for (int j = i; j < *numProdutos - 1; j++) {
                produtos[j] = produtos[j + 1];
            }
            (*numProdutos)--;
            produtoEncontrado = 1;
            printf("Produto removido com sucesso!\n");
            break;
        }
    }

    if (!produtoEncontrado) {
        printf("Produto com ID %d não encontrado.\n", produtoID);
    }
}

void menuPrincipal(Produto *produtos, int *numProdutos, Cliente *clientes, int *numClientes, Venda *vendas, int *numVendas) {
    int opcao;
    int senha;
    
    do {
        printf("\n----- Menu Principal -----\n");
        printf("1. Cadastrar Cliente\n");
        printf("2. Cadastrar Produto\n");
        printf("3. Realizar Venda\n");
        printf("4. Gerar Relatório de Vendas\n");
        printf("5. Remover Produto\n");
        printf("6. Sair\n");
        printf("Escolha uma opção: ");
        scanf("%d", &opcao);
        getchar(); // Limpar o buffer de entrada

        switch (opcao) {
            case 1:
                cadastrarCliente(clientes, numClientes);
                break;
            case 2:
                cadastrarProduto(produtos, numProdutos);
                break;
            case 3:
                realizarVenda(vendas, numVendas, clientes, *numClientes, produtos, *numProdutos);
                break;
            case 4:
                gerarRelatorioVendas(vendas, *numVendas, produtos, *numProdutos);
                ArqRelVendas(vendas, *numVendas, produtos, *numProdutos);
                break;
            case 5:
                removerProduto(produtos, numProdutos);
                break;
            case 6:
                printf("Saindo...\n");
                break;
            default:
                printf("Opção inválida. Tente novamente.\n");
                break;
        }

        if (opcao != 6) {
            printf("\nPressione Enter para voltar ao menu principal...");
            getchar(); // Limpar o buffer de entrada
        }
        
        system("clear"); // Use "cls" para Windows
    } while (opcao != 6);
}

int main() {
    setlocale(LC_ALL, "Portuguese");

    Produto produtos[100];
    Cliente clientes[100];
    Venda vendas[100];

    int numProdutos = 0;
    int numClientes = 0;
    int numVendas = 0;

    menuPrincipal(produtos, &numProdutos, clientes, &numClientes, vendas, &numVendas);

    return 0;
}
